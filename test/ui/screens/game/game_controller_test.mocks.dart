// Mocks generated by Mockito 5.4.4 from annotations
// in beercules/test/ui/screens/game/game_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:beercules/common/beercules_card_type.dart' as _i8;
import 'package:beercules/ui/screens/game/services/game_ad_service.dart' as _i9;
import 'package:beercules/ui/screens/game/services/game_navigation_service.dart'
    as _i3;
import 'package:beercules/ui/screens/game/services/game_persistence_service.dart'
    as _i2;
import 'package:flutter/material.dart' as _i5;
import 'package:fpdart/fpdart.dart' as _i4;
import 'package:google_mobile_ads/google_mobile_ads.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGamePersistenceServiceGame_0 extends _i1.SmartFake
    implements _i2.GamePersistenceServiceGame {
  _FakeGamePersistenceServiceGame_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GameNavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameNavigationService extends _i1.Mock
    implements _i3.GameNavigationService {
  MockGameNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void goBack({Uri? fallbackUri}) => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [],
          {#fallbackUri: fallbackUri},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop<T>({T? data}) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
          {#data: data},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceWith(Uri? uri) => super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceWithNamed(Uri? uri) => super.noSuchMethod(
        Invocation.method(
          #replaceWithNamed,
          [uri],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showSnackBar(String? message) => super.noSuchMethod(
        Invocation.method(
          #showSnackBar,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.TaskEither<Object, _i4.Option<T>> showPopup<T>(
    _i5.Widget? popup, {
    bool? canBePoppedViaBackGesture,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showPopup,
          [popup],
          {#canBePoppedViaBackGesture: canBePoppedViaBackGesture},
        ),
        returnValue: _i6.dummyValue<_i4.TaskEither<Object, _i4.Option<T>>>(
          this,
          Invocation.method(
            #showPopup,
            [popup],
            {#canBePoppedViaBackGesture: canBePoppedViaBackGesture},
          ),
        ),
      ) as _i4.TaskEither<Object, _i4.Option<T>>);
}

/// A class which mocks [GamePersistenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGamePersistenceService extends _i1.Mock
    implements _i2.GamePersistenceService {
  MockGamePersistenceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GamePersistenceServiceGame defaultGame() => (super.noSuchMethod(
        Invocation.method(
          #defaultGame,
          [],
        ),
        returnValue: _FakeGamePersistenceServiceGame_0(
          this,
          Invocation.method(
            #defaultGame,
            [],
          ),
        ),
      ) as _i2.GamePersistenceServiceGame);

  @override
  _i7.Future<void> resetActiveGameToDefaultGame() => (super.noSuchMethod(
        Invocation.method(
          #resetActiveGameToDefaultGame,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resetActiveGameToCustomGame() => (super.noSuchMethod(
        Invocation.method(
          #resetActiveGameToCustomGame,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> decreaseActiveGameCardAmountByOne(
          _i8.BeerculesCardType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #decreaseActiveGameCardAmountByOne,
          [type],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [GameAdService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameAdService extends _i1.Mock implements _i9.GameAdService {
  MockGameAdService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i10.BannerAd?> getBannerAd() => (super.noSuchMethod(
        Invocation.method(
          #getBannerAd,
          [],
        ),
        returnValue: _i7.Future<_i10.BannerAd?>.value(),
      ) as _i7.Future<_i10.BannerAd?>);

  @override
  _i7.Future<_i10.BannerAd?> getCardAd() => (super.noSuchMethod(
        Invocation.method(
          #getCardAd,
          [],
        ),
        returnValue: _i7.Future<_i10.BannerAd?>.value(),
      ) as _i7.Future<_i10.BannerAd?>);
}
